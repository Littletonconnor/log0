---
description:
globs:
alwaysApply: false
---
---
description: Cursor Rules Location and Database Standards
globs: *.mdc
---
# Cursor Rules Location and Database Standards

Rules for placing and organizing Cursor rule files and database configurations in the repository.

<rule>
name: cursor_rules_location
description: Standards for placing Cursor rule files and database configurations in the correct directory
filters:
  # Match any .mdc files
  - type: file_extension
    pattern: "\\.mdc$"
  # Match files that look like Cursor rules
  - type: content
    pattern: "(?s)<rule>.*?</rule>"
  # Match file creation events
  - type: event
    pattern: "file_create"
  # Match Drizzle config files
  - type: file_extension
    pattern: "drizzle.*\\.config\\.ts$"

actions:
  - type: reject
    conditions:
      - pattern: "^(?!\\.\\/\\.cursor\\/rules\\/.*\\.mdc$)"
        message: "Cursor rule files (.mdc) must be placed in the .cursor/rules directory"

  - type: suggest
    message: |
      When creating Cursor rules and database configurations:

      1. Always place rule files in PROJECT_ROOT/.cursor/rules/:
         ```
         .cursor/rules/
         ├── your-rule-name.mdc
         ├── another-rule.mdc
         └── ...
         ```

      2. Follow the naming convention:
         - Use kebab-case for filenames
         - Always use .mdc extension for rules
         - Make names descriptive of the rule's purpose

      3. Directory structure:
         ```
         PROJECT_ROOT/
         ├── .cursor/
         │   └── rules/
         │       ├── your-rule-name.mdc
         │       └── ...
         ├── src/
         │   └── app/
         │       └── db/
         │           ├── migrations/  # SQLite migrations
         │           ├── schema.ts    # Drizzle schema
         │           └── index.ts     # Database client
         ├── drizzle.dev.config.ts   # Development DB config
         ├── drizzle.prod.config.ts  # Production DB config
         └── ...
         ```

      4. Never place rule files:
         - In the project root
         - In subdirectories outside .cursor/rules
         - In any other location

      5. Database Commands Guide:
         ```bash
         # Generate Migration Commands:
         bun db:generate:dev    # Creates new migration files based on schema changes (development)
         bun db:generate:prod   # Creates new migration files based on schema changes (production)

         # What generate does:
         # - Compares your schema.ts with current database state
         # - Creates new SQL migration files in src/app/db/migrations
         # - Does NOT modify your database

         # Push Commands:
         bun db:push:dev       # Directly applies schema changes to development database
         bun db:push:prod      # Directly applies schema changes to production database

         # What push does:
         # - Immediately applies schema changes to your database
         # - Skips creating migration files
         # - Best for development, NOT recommended for production

         # Database Studio:
         bun db:studio        # Opens Drizzle Studio UI to view/manage data
         ```

      6. SQLite Database Locations:
         - Development: ./dev.db
         - Production: ./prod.db

examples:
  - input: |
      # Bad: Rule file in wrong location
      rules/my-rule.mdc
      my-rule.mdc
      .rules/my-rule.mdc

      # Good: Rule file in correct location
      .cursor/rules/my-rule.mdc

      # Bad: Drizzle config without environment
      drizzle.config.ts

      # Good: Environment-specific Drizzle configs
      drizzle.dev.config.ts
      drizzle.prod.config.ts
    output: "Correctly placed Cursor rule file and database configuration"

metadata:
  priority: high
  version: 1.0
</rule>
